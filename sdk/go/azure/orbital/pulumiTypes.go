// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package orbital

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SpacecraftLink struct {
	// Bandwidth in Mhz.
	BandwidthMhz float64 `pulumi:"bandwidthMhz"`
	// Center frequency in Mhz.
	CenterFrequencyMhz float64 `pulumi:"centerFrequencyMhz"`
	// Direction if the communication. Possible values are `Uplink` and `Downlink`.
	Direction string `pulumi:"direction"`
	// Name of the link.
	Name string `pulumi:"name"`
	// Polarization. Possible values are `RHCP`, `LHCP`, `linearVertical` and `linearHorizontal`.
	Polarization string `pulumi:"polarization"`
}

// SpacecraftLinkInput is an input type that accepts SpacecraftLinkArgs and SpacecraftLinkOutput values.
// You can construct a concrete instance of `SpacecraftLinkInput` via:
//
//	SpacecraftLinkArgs{...}
type SpacecraftLinkInput interface {
	pulumi.Input

	ToSpacecraftLinkOutput() SpacecraftLinkOutput
	ToSpacecraftLinkOutputWithContext(context.Context) SpacecraftLinkOutput
}

type SpacecraftLinkArgs struct {
	// Bandwidth in Mhz.
	BandwidthMhz pulumi.Float64Input `pulumi:"bandwidthMhz"`
	// Center frequency in Mhz.
	CenterFrequencyMhz pulumi.Float64Input `pulumi:"centerFrequencyMhz"`
	// Direction if the communication. Possible values are `Uplink` and `Downlink`.
	Direction pulumi.StringInput `pulumi:"direction"`
	// Name of the link.
	Name pulumi.StringInput `pulumi:"name"`
	// Polarization. Possible values are `RHCP`, `LHCP`, `linearVertical` and `linearHorizontal`.
	Polarization pulumi.StringInput `pulumi:"polarization"`
}

func (SpacecraftLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpacecraftLink)(nil)).Elem()
}

func (i SpacecraftLinkArgs) ToSpacecraftLinkOutput() SpacecraftLinkOutput {
	return i.ToSpacecraftLinkOutputWithContext(context.Background())
}

func (i SpacecraftLinkArgs) ToSpacecraftLinkOutputWithContext(ctx context.Context) SpacecraftLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpacecraftLinkOutput)
}

// SpacecraftLinkArrayInput is an input type that accepts SpacecraftLinkArray and SpacecraftLinkArrayOutput values.
// You can construct a concrete instance of `SpacecraftLinkArrayInput` via:
//
//	SpacecraftLinkArray{ SpacecraftLinkArgs{...} }
type SpacecraftLinkArrayInput interface {
	pulumi.Input

	ToSpacecraftLinkArrayOutput() SpacecraftLinkArrayOutput
	ToSpacecraftLinkArrayOutputWithContext(context.Context) SpacecraftLinkArrayOutput
}

type SpacecraftLinkArray []SpacecraftLinkInput

func (SpacecraftLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpacecraftLink)(nil)).Elem()
}

func (i SpacecraftLinkArray) ToSpacecraftLinkArrayOutput() SpacecraftLinkArrayOutput {
	return i.ToSpacecraftLinkArrayOutputWithContext(context.Background())
}

func (i SpacecraftLinkArray) ToSpacecraftLinkArrayOutputWithContext(ctx context.Context) SpacecraftLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpacecraftLinkArrayOutput)
}

type SpacecraftLinkOutput struct{ *pulumi.OutputState }

func (SpacecraftLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpacecraftLink)(nil)).Elem()
}

func (o SpacecraftLinkOutput) ToSpacecraftLinkOutput() SpacecraftLinkOutput {
	return o
}

func (o SpacecraftLinkOutput) ToSpacecraftLinkOutputWithContext(ctx context.Context) SpacecraftLinkOutput {
	return o
}

// Bandwidth in Mhz.
func (o SpacecraftLinkOutput) BandwidthMhz() pulumi.Float64Output {
	return o.ApplyT(func(v SpacecraftLink) float64 { return v.BandwidthMhz }).(pulumi.Float64Output)
}

// Center frequency in Mhz.
func (o SpacecraftLinkOutput) CenterFrequencyMhz() pulumi.Float64Output {
	return o.ApplyT(func(v SpacecraftLink) float64 { return v.CenterFrequencyMhz }).(pulumi.Float64Output)
}

// Direction if the communication. Possible values are `Uplink` and `Downlink`.
func (o SpacecraftLinkOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v SpacecraftLink) string { return v.Direction }).(pulumi.StringOutput)
}

// Name of the link.
func (o SpacecraftLinkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SpacecraftLink) string { return v.Name }).(pulumi.StringOutput)
}

// Polarization. Possible values are `RHCP`, `LHCP`, `linearVertical` and `linearHorizontal`.
func (o SpacecraftLinkOutput) Polarization() pulumi.StringOutput {
	return o.ApplyT(func(v SpacecraftLink) string { return v.Polarization }).(pulumi.StringOutput)
}

type SpacecraftLinkArrayOutput struct{ *pulumi.OutputState }

func (SpacecraftLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpacecraftLink)(nil)).Elem()
}

func (o SpacecraftLinkArrayOutput) ToSpacecraftLinkArrayOutput() SpacecraftLinkArrayOutput {
	return o
}

func (o SpacecraftLinkArrayOutput) ToSpacecraftLinkArrayOutputWithContext(ctx context.Context) SpacecraftLinkArrayOutput {
	return o
}

func (o SpacecraftLinkArrayOutput) Index(i pulumi.IntInput) SpacecraftLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SpacecraftLink {
		return vs[0].([]SpacecraftLink)[vs[1].(int)]
	}).(SpacecraftLinkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SpacecraftLinkInput)(nil)).Elem(), SpacecraftLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpacecraftLinkArrayInput)(nil)).Elem(), SpacecraftLinkArray{})
	pulumi.RegisterOutputType(SpacecraftLinkOutput{})
	pulumi.RegisterOutputType(SpacecraftLinkArrayOutput{})
}
